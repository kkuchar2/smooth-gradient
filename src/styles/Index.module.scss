@use "sass:math";

.indexPage {
  display: grid;
  position: relative;
  width: 100%;
}

.container {
  container-name: mycontainer;
  container-type: inline-size;
  width: 1200px;

  @media (max-width: 1200px) {
    width: 100%;
  }
}

//////////////////////////////////////////////////////////////////////

// Generating nice gradients with Gaussian distribution
// We will create N gradient stops with Gaussian distribution and SCSS @mixin
// stddev is the standard deviation of the Gaussian curve and controls the spread of the gradient
// mean is the mean of the Gaussian curve and controls the center of the gradient
// stops is the number of stops in the gradient


// NOTES:
// 1. stddev and stops are picked experimentally to get a nicer gradient
// 2. Different colors and different element sizes might require different stddev and stops
// 3. Less banding will be visible, when we won't use opacity in gradient colors
// 4. gradient-blend-mode: lighten; will get rid of dark boxes, when gradients are close to each other (try to disable it to see)
// 5. Because of blending mode, overlaying (or very close)
// gradient's won't blend together nicely, but it's a trade-off for less banding

$pi: 3.14159;
$e: 2.718;
@function gaussian($x, $mean: 0, $stddev: 1) {
  // Calculate the factor
  $factor: math.div(1, $stddev * math.sqrt(2 * $pi));

  // Calculate the exponent
  $exponent: -0.5 * math.pow(math.div($x - $mean, $stddev), 2);

  // Return the Gaussian value
  @return $factor * math.pow($e, $exponent);
}

@mixin generate-gradient($start-color, $end-color, $stops: 40, $mean: 0, $stddev: 0.25) {
  // 1. Calculate weights based on Gaussian curve
  $weights: ();
  @for $i from 0 to $stops {
    $x: math.div($i, $stops);
    $weight: gaussian($x, $mean, $stddev);
    $weights: append($weights, $weight);
  }
  // 2. Calculate scaling factor to fit weights within 0 to 100 (range required by mix)
  $max-weight: math.max($weights...);
  $scale-factor: math.div(100, $max-weight);

  // 3. Calculate next color based on weights
  $gradient: '';
  $i: 0;

  @each $weight in $weights {
    // Scale the weight to fit within 0 to 100
    $scaled-weight: $weight * $scale-factor;

    // Calculate the current color
    $current-color: rgba(mix($start-color, $end-color, $scaled-weight * 1%), 1);

    // Add the stop to the gradient
    $gradient: #{$gradient}, #{$current-color} math.percentage(math.div($i, $stops));

    // Increment the stop
    $i: $i + 1;
  }

  // 4. Output the gradient
  background-image: radial-gradient($gradient);
  mix-blend-mode: lighten; // This will get rid of dark boxes, when gradients are close to each other
}

$start-color: rgb(42, 56, 76); // hex: #2a384c
$start-color-with-opacity: rgba(55, 74, 102, 0.6);
$end-color: #0e1111;
$end-color-with-opacity: rgba(0, 0, 0, 0);

@mixin circle-base() {
  height: 80rem;
  width: 80rem;
}

// Gradient with Gaussian curve and no-opacities
.circle {
  @include generate-gradient($start-color, $end-color, 20, 0, 0.20);
  @include circle-base();
}

// Gradient without Gaussian curve
.circle2 {
  background: radial-gradient(circle at center, $start-color 0, $end-color 50%) no-repeat;
  @include circle-base();
}

// Gradient without Gaussian curve and with opacity
.circle3 {
  background: radial-gradient(circle at center, $start-color-with-opacity 0, $end-color-with-opacity 40%) no-repeat;
  @include circle-base();
}